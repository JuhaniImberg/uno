// Generated by CoffeeScript 1.6.3
(function() {
  var irc, net, stdin, sys;

  net = require("net");

  sys = require("sys");

  stdin = process.openStdin();

  stdin.addListener("data", function(d) {
    var message;
    message = d.toString().substring(0, d.length - 2);
    if (message.indexOf(".") === 0) {
      return irc.command(message.substring(1));
    } else {
      return irc.send(message);
    }
  });

  irc = {
    buffer: "",
    hooks: [],
    hid: 0
  };

  irc.config = {
    nick: "uno",
    realname: "Uno Not One",
    network: "irc.paivola.fi:6667",
    encoding: "utf8",
    modulePath: "C:\\Users\\juhani\\uno\\lib\\",
    autojoin: ["#uno"]
  };

  irc.modules = [];

  irc.loadModule = function(name) {
    var error, module;
    try {
      console.log("LOADING MODULE " + name);
      module = require("./" + name + ".module.js")[name];
      module.init(irc);
      this.modules.push({
        name: name,
        module: module
      });
      return console.log("LOADED MODULE " + name);
    } catch (_error) {
      error = _error;
      return console.log("ERROR " + error);
    }
  };

  irc.reloadModules = function() {
    var i, module, _i, _len, _ref, _results;
    console.log("RELOADING MODULES");
    _ref = this.modules;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      console.log("RELOADING MODULE " + i.name);
      console.log(irc.hooks);
      i.module.deinit(irc);
      console.log(irc.hooks);
      delete require.cache[irc.config.modulePath + i.name + ".module.js"];
      module = require("./" + i.name + ".module.js")[i.name];
      module.init(irc);
      console.log(irc.hooks);
      i.module = module;
      _results.push(console.log("RELOADED MODULE " + i.name));
    }
    return _results;
  };

  irc.hook = function(action, callback) {
    this.hooks.push({
      callback: callback,
      action: action,
      hookId: ++irc.hid
    });
    return irc.hid;
  };

  irc.dehook = function(hookId) {
    var i, offset, _i, _len, _ref;
    offset = 0;
    _ref = this.hooks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.hookId === hookId) {
        break;
      }
      offset++;
    }
    if (this.hooks[offset].hookId = hookId) {
      return this.hooks.splice(offset, 1);
    }
  };

  irc.fire = function(action, args) {
    var error, i, _i, _len, _ref, _results;
    _ref = this.hooks;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      try {
        if (i.action === action) {
          _results.push(i.callback(args));
        } else {
          _results.push(void 0);
        }
      } catch (_error) {
        error = _error;
        _results.push(console.log("ERROR " + error));
      }
    }
    return _results;
  };

  irc.command = function(com) {
    var args, command;
    console.log("command " + com);
    com = com.split(" ");
    command = com[0].toLowerCase();
    args = com.slice(1);
    switch (command) {
      case 'q':
      case 'e':
      case 'quit':
      case 'exit':
        irc.send("QUIT");
        return process.exit(0);
      case 'c':
      case 'reconnect':
      case 'connect':
        return irc.connect();
      case 'r':
      case 'reload':
      case 'reloadmodules':
        return irc.reloadModules();
      case 'name':
      case 'nick':
      case 'rename':
      case 'renick':
        return irc.name(args[0]);
      case 'load':
      case 'l':
        return irc.loadModule(args[0]);
      case 'join':
      case 'j':
        return irc.send('JOIN', args[0]);
    }
  };

  irc.name = function(newName) {
    return this.send('NICK ' + newName);
  };

  irc.connect = function() {
    var a, addr, port;
    this.socket.setEncoding(this.config.encoding);
    this.socket.setNoDelay();
    a = this.config.network.split(":");
    port = a[1];
    addr = a[0];
    return this.socket.connect(port, addr);
  };

  irc.send = function(arg1) {
    var i, message, _i, _len;
    message = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      i = arguments[_i];
      if (i) {
        message.push(i);
      }
    }
    message = message.join(' ');
    sys.puts('< ' + message);
    message = message + "\r\n";
    return this.socket.write(message, this.config.encoding);
  };

  irc.parse = function(message) {
    var match, params, parsed;
    match = message.match(/(?:(:[^\s]+) )?([^\s]+) (.+)/);
    parsed = {
      prefix: match[1],
      command: match[2]
    };
    params = match[3].match(/(.*?) ?:(.*)/);
    if (params) {
      params[1] = params[1] ? params[1].split(' ') : [];
      params[2] = params[2] ? [params[2]] : [];
      params = params[1].concat(params[2]);
    } else {
      params = match[3].split(' ');
    }
    parsed.params = params;
    return parsed;
  };

  irc.socket = new net.Socket;

  irc.socket.on('connect', function() {
    var i, _i, _len, _ref, _results;
    irc.send('NICK ' + irc.config.nick);
    irc.send('USER', irc.config.nick, '0 *:' + irc.config.nick, irc.config.realname);
    _ref = irc.config.autojoin;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(irc.send('JOIN', i));
    }
    return _results;
  });

  irc.socket.on('data', function(data) {
    var message, offset;
    this.buffer = this.buffer + data;
    while (this.buffer.length > 0) {
      offset = this.buffer.indexOf("\r\n");
      if (offset < 0) {
        return;
      }
      message = this.buffer.substr(0, offset);
      this.buffer = this.buffer.substr(offset + 2);
      sys.puts('> ' + message);
      message = irc.parse(message);
      if (message !== false) {
        irc.handleMessage(message);
      }
    }
  });

  irc.handleMessage = function(message) {
    var args, chat, isChannel, reciever, respond, sender;
    console.log(message);
    switch (message.command) {
      case 'PING':
        return this.send('PONG', ':' + message.params[0]);
      case 'PRIVMSG':
        chat = message.params[1];
        reciever = message.params[0];
        sender = message.prefix.split("!")[0].substring(1);
        isChannel = reciever.indexOf("#") === 0;
        respond = isChannel ? reciever : sender;
        args = {
          message: chat,
          sender: sender,
          reciever: reciever,
          isChannel: isChannel,
          prefix: message.prefix,
          respond: respond
        };
        return irc.fire('PRIVMSG', args);
    }
  };

  irc.loadModule("mui");

  irc.connect();

}).call(this);
