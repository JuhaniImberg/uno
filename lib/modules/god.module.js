// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2013 Juhani Imberg

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  var god;

  god = function() {
    var o;
    o = {};
    o.info = {};
    o.info.name = "god";
    o.info.description = "Provides god services";
    o.info.author = "Juhani Imberg";
    o.info.version = 1;
    o.gods = [];
    o.pending = [];
    o.hookId1 = -1;
    o.hookId2 = -1;
    o.irc = null;
    o.add = function(name) {
      var error, pos;
      if (typeof name !== "string") {
        return "invalid argument";
      }
      pos = this.gods.indexOf(name);
      if (pos > -1) {
        return 'already a god';
      }
      pos = this.pending.indexOf(name);
      if (pos === -1) {
        this.pending.push(name);
        return 'pending: [' + o.pending.join(", ") + ']';
        try {
          return o.irc.send('PRIVMSG NickServ STATUS ' + name);
        } catch (_error) {
          error = _error;
        }
      } else {
        return 'already pending';
      }
    };
    o.remove = function(name) {
      var pos;
      if (typeof name !== "string") {
        return "invalid argument";
      }
      pos = this.gods.indexOf(name);
      if (pos !== -1) {
        this.gods.splice(pos, 1);
        return 'gods: [' + o.gods.join(", ") + ']';
      } else {
        return 'not a god';
      }
    };
    o.auth = function(name) {
      var pos;
      pos = this.gods.indexOf(name);
      if (pos === -1) {
        return false;
      }
      return true;
    };
    o.refresh = function() {
      var error, i, _i, _j, _len, _len1, _ref, _ref1, _results;
      try {
        _ref = o.pending;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          o.irc.send('PRIVMSG NickServ STATUS ' + i);
        }
        _ref1 = o.gods;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          i = _ref1[_j];
          _results.push(o.irc.send('PRIVMSG NickServ STATUS ' + i));
        }
        return _results;
      } catch (_error) {
        error = _error;
      }
    };
    o.init = function(irc) {
      var i, _i, _len, _ref;
      o.irc = irc;
      _ref = irc.config.modules.god.auto || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        o.add(i);
      }
      o.refresh();
      o.hookId1 = irc.hook('PRIVMSG', function(args) {
        var msg, prefix;
        msg = args.message.toLowerCase().split(" ");
        prefix = irc.config.commandPrefix;
        if (msg[0] === prefix + "god" || msg[0] === prefix + "gods") {
          msg[1] = msg[1] || "list";
          switch (msg[1]) {
            case "":
              return irc.respond(args, '');
            case "pending":
              return irc.respond(args, 'pending: [' + o.pending.join(", ") + ']');
            case "list":
              return irc.respond(args, 'gods: [' + o.gods.join(", ") + ']');
            case "add":
              if (irc.modman.god(args.sender)) {
                return irc.respond(args, o.add(msg[2]));
              } else {
                return irc.respond(args, 'you have no rights');
              }
              break;
            case "remove":
              if (irc.modman.god(args.sender)) {
                return irc.respond(args, o.remove(msg[2]));
              } else {
                return irc.respond(args, 'you have no rights');
              }
              break;
            case "refresh":
              o.refresh();
              return irc.respond(args, 'refreshing pending gods');
            case "help":
              return irc.respond(args, 'pending - list of pending gods, list - list of verified gods, add - add a pending god, remove - remove a god, refresh - refreshes god status, help - this');
          }
        }
      });
      return o.hookId2 = irc.hook('NOTICE', function(args) {
        var msg, pos;
        msg = args.what.split(" ");
        if (msg[0] === "STATUS" && args.who === "NickServ") {
          pos = o.pending.indexOf(msg[1]);
          if (pos !== -1) {
            if (msg[2] === "3") {
              o.pending.splice(pos, 1);
              return o.gods.push(msg[1]);
            }
          } else {
            if (msg[2] !== "3") {
              o.gods.splice(pos, 1);
              return o.pending.push(msg[1]);
            }
          }
        }
      });
    };
    o.deinit = function(irc) {
      irc.dehook(this.hookId1);
      return irc.dehook(this.hookId2);
    };
    return o;
  };

  exports.god = new god;

}).call(this);
